1
00:00:00,136 --> 00:00:04,498
In 1991, Linus Torvalds created the Linux

2
00:00:04,498 --> 00:00:08,500
kernel as an open source software project

3
00:00:08,500 --> 00:00:11,605
where changes to the software were passed

4
00:00:11,605 --> 00:00:14,600
as patches and archived files. Now this

5
00:00:14,600 --> 00:00:18,562
was done for a little over a decade, until

6
00:00:18,562 --> 00:00:23,280
in 2002 the Linux project began using a

7
00:00:23,280 --> 00:00:25,910
proprietary distributed version control

8
00:00:25,910 --> 00:00:28,901
system called BitKeeper. Now this worked

9
00:00:28,901 --> 00:00:31,072
out well, as it brought the advantages of

10
00:00:31,072 --> 00:00:33,475
a distributed version control system to

11
00:00:33,475 --> 00:00:36,900
the Linux kernel, and at the time, it

12
00:00:36,900 --> 00:00:39,979
allowed open source developers to use the

13
00:00:39,979 --> 00:00:42,534
basic version for free. But since

14
00:00:42,534 --> 00:00:44,917
BitKeeper is a proprietary software, many

15
00:00:44,917 --> 00:00:47,884
of the Linux developers were against the

16
00:00:47,884 --> 00:00:51,060
idea of using a proprietary software for

17
00:00:51,060 --> 00:00:53,632
contributing to Linux's open source

18
00:00:53,632 --> 00:00:58,018
kernel. And in 2005, BitKeeper decided to

19
00:00:58,018 --> 00:01:01,245
revoke its free-of-charge status for using

20
00:01:01,245 --> 00:01:03,824
the tool. Not wanting to revert to their

21
00:01:03,824 --> 00:01:06,395
previous model of using patches, this

22
00:01:06,395 --> 00:01:09,284
change prompted Linus Torvalds and the

23
00:01:09,284 --> 00:01:11,553
Linux development community to develop

24
00:01:11,553 --> 00:01:15,121
their own tool based on the advantages of

25
00:01:15,121 --> 00:01:18,225
BitKeeper. Now, they wanted a tool that

26
00:01:18,225 --> 00:01:21,317
would be fast, have a simple and

27
00:01:21,317 --> 00:01:23,519
easy-to-use design, have strong support

28
00:01:23,519 --> 00:01:26,365
for non-linear development, be fully

29
00:01:26,365 --> 00:01:30,515
distributed, and be able to handle large

30
00:01:30,515 --> 00:01:33,762
projects with efficiency. The tool that

31
00:01:33,762 --> 00:01:38,019
was created was called Git. Now, since its

32
00:01:38,019 --> 00:01:41,640
birth in 2005, Git has retained these

33
00:01:41,640 --> 00:01:44,423
initial qualities as it has evolved and

34
00:01:44,423 --> 00:01:46,520
matured to be the popular distributed

35
00:01:46,520 --> 00:01:49,508
version control system that it has today,

36
00:01:49,508 --> 00:01:52,147
that so many developers, team members,

37
00:01:52,147 --> 00:01:54,545
project managers, and project

38
00:01:54,545 --> 00:01:57,543
collaborators choose for their projects.

39
00:01:57,543 --> 00:01:59,704
Now that we're familiar with the different

40
00:01:59,704 --> 00:02:02,021
types of version control systems, and why

41
00:02:02,021 --> 00:02:05,115
Git was created, let's now look a little

42
00:02:05,115 --> 00:02:10,000
closer and understand exactly how Git works.

